local Players = game:GetService("Players")
local player = Players.LocalPlayer

local ANIM_ID = 12296882427

local jumpHolding = false

local function isAnimPlaying(humanoid, animId)
    if not humanoid then return false end
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        if track.Animation.AnimationId == "rbxassetid://" .. animId then
            return true
        end
    end
    return false
end

local function getNearestPlayer(char)
    local nearest = nil
    local shortest = math.huge
    for _, other in ipairs(Players:GetPlayers()) do
        if other ~= player and other.Character and other.Character:FindFirstChild("HumanoidRootPart") then
            local dist = (char.HumanoidRootPart.Position - other.Character.HumanoidRootPart.Position).Magnitude
            if dist < shortest then
                shortest = dist
                nearest = other
            end
        end
    end
    return nearest
end

task.spawn(function()
    while true do
        local char = player.Character
        if not char or not char.Parent then
            task.wait(0.5)
            continue
        end

        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid and isAnimPlaying(humanoid, ANIM_ID) then
            -- Hold jump
            if not jumpHolding then
                jumpHolding = true
                task.spawn(function()
                    while jumpHolding do
                        if char and char:FindFirstChild("Humanoid") then
                            char.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                        task.wait(0.1)
                    end
                end)
            end

            -- Dash
            task.wait(2.21)

            local communicate = char:FindFirstChild("Communicate")
            if communicate then
                local args = {
                    {
                        Dash = Enum.KeyCode.W,
                        Key = Enum.KeyCode.Q,
                        Goal = "KeyPress"
                    }
                }
                communicate:FireServer(unpack(args))
            end

            -- Stop holding jump immediately after firing dash args
            jumpHolding = false

            -- Ping-based wait before lock-on
            local ping = player:GetNetworkPing() * 1000 -- ms
            if ping <= 50 then
                task.wait(0.16)
            else
                task.wait(0.17)
            end

            local nearest = getNearestPlayer(char)
            if nearest and char and char:FindFirstChild("HumanoidRootPart") and nearest.Character and nearest.Character:FindFirstChild("HumanoidRootPart") then
                local myHRP = char.HumanoidRootPart
                local theirHRP = nearest.Character.HumanoidRootPart

                -- Disable AutoRotate so character faces target
                humanoid.AutoRotate = false

                -- Lock-on positioning
                myHRP.CFrame = CFrame.new(myHRP.Position, Vector3.new(theirHRP.Position.X, myHRP.Position.Y, theirHRP.Position.Z))

                -- No AutoRotate re-enable to keep facing direction
            end

            -- Prevent spamming by waiting a bit before checking animation again
            task.wait(0.5)
        else
            jumpHolding = false
            task.wait(0.1)
        end
    end
end)



-twsted

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local function getNearestPlayer()
	local nearestPlayer = nil
	local shortestDist = math.huge
	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			local targetHRP = plr.Character.HumanoidRootPart
			local dist = (hrp.Position - targetHRP.Position).Magnitude
			if dist < shortestDist then
				shortestDist = dist
				nearestPlayer = plr
			end
		end
	end
	return nearestPlayer
end

-- Function to get local player's ping in milliseconds
local function getPing()
	return math.floor(Players:GetPlayers()[1]:GetNetworkPing() * 1000)
end

UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.R then

		local args = {
			{
				Goal = "LeftClick"
			}
		}
		char:WaitForChild("Communicate"):FireServer(unpack(args))

		task.wait(1.2)

		local args = {
			{
				Goal = "LeftClickRelease"
			}
		}
		char:WaitForChild("Communicate"):FireServer(unpack(args))

		local backOffset = CFrame.new(0, 0, 3)
		local goal = { CFrame = hrp.CFrame * backOffset }
		local tween = TweenService:Create(hrp, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), goal)
		tween:Play()

		-- Check ping before next wait
		local ping = getPing()
		local adjustedWait = ping <= 50 and 0.4 or 0.49
		task.wait(adjustedWait)

		local args = {
			{
				Dash = Enum.KeyCode.W,
				Key = Enum.KeyCode.Q,
				Goal = "KeyPress"
			}
		}
		char:WaitForChild("Communicate"):FireServer(unpack(args))

		local nearest = getNearestPlayer()
		if nearest and nearest.Character and nearest.Character:FindFirstChild("HumanoidRootPart") then
			local targetHRP = nearest.Character.HumanoidRootPart
			local lockOn = true

			if char:FindFirstChild("Humanoid") then
				char.Humanoid.AutoRotate = false
			end

			local conn
			conn = RunService.Heartbeat:Connect(function()
				if not lockOn then
					conn:Disconnect()
					if char:FindFirstChild("Humanoid") then
						char.Humanoid.AutoRotate = true
					end
					return
				end
				local lookVector = (targetHRP.Position - hrp.Position).Unit
				local currentCFrame = hrp.CFrame
				local targetCFrame = CFrame.new(hrp.Position, hrp.Position + lookVector)
				hrp.CFrame = currentCFrame:Lerp(targetCFrame, 0.3)
			end)

			task.delay(0.5, function()
				lockOn = false
			end)
		end
	end
end)
